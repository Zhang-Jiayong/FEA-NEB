#log         log.neb.lammps
#--------------------------------------------------------------------------------------------------------------------------
# create FCC structure   - copper
# box axis ox: [ 0 -1  1]
# box axis oy: [ 1  1  1]
# box axis oz: [-2  1  1]
#       |y1 [-1 -1  1]
#       |
#       |
#       |____________ x1 [ 1  1  2]
#      /o
#     /
#    /
#   /z1 [ 1 -1 0]

variable    lattice_type index fcc
variable    lattice_atom equal 4
#variable    lattice_cons equal 3.615
if   "${metal} == Al99" then "variable  lattice_cons equal 4.05 " &
elif "${metal} == Al03"      "variable  lattice_cons equal 4.05 " &
elif "${metal} == Ni"        "variable  lattice_cons equal 3.52 " &
elif "${metal} == Cu"        "variable  lattice_cons equal 3.615" &
elif "${metal} == Ag"        "variable  lattice_cons equal 4.09 " &
elif "${metal} == Au"        "variable  lattice_cons equal 4.08 " &
else "print '------- This is nothing ----'"   "quit"
print '------- This is ${metal} ---------'

variable    cell_volume  equal ${lattice_cons}^3    
variable    atom_volume  equal ${cell_volume}/${lattice_atom}*10000 # 10000 是为了使得最终的应力结果以GPa为单位而引入的参数
                                                                    # metal units 中, 应力单位为bar

variable        timestep    equal 0.002

atom_modify     map array sort 0 0.0    # build mapping and turn off sorting

variable        nStep       index 5064
variable        iReplica    index 2
read_restart    ./res/neb.${nStep}.${iReplica}.restart
reset_timestep  0
# -------- potentials & neighbor -------
pair_style      eam/alloy
#pair_coeff      * * Cu_mishin1.eam.alloy Cu
if   "${metal} == Al99" then "pair_coeff  * * ../potentials/Al99.eam.alloy Al" &
elif "${metal} == Al03"      "pair_coeff  * * ../potentials/Al03.eam.alloy Al" &
elif "${metal} == Ni"        "pair_coeff  * * ../potentials/Ni99.eam.alloy Ni" &
elif "${metal} == Cu"        "pair_coeff  * * ../potentials/Cu_mishin1.eam.alloy Cu" &
elif "${metal} == Ag"        "pair_coeff  * * ../potentials/Ag.eam.alloy Ag" &
elif "${metal} == Au"        "pair_coeff  * * ../potentials/Au-Grochola-JCP05.eam.alloy Au" &
else "quit"

neighbor        1.0 bin
neigh_modify    every 1 delay 5 check yes
# --------------------------------------

# ----------------------- 定义统计量 ---------------------------------
compute         atomStress all stress/atom NULL
compute         atomPE all pe/atom 
#---------- 每个原子的应力 -------------
variable        peratom_sxx atom c_atomStress[1]/${atom_volume}
variable        peratom_syy atom c_atomStress[2]/${atom_volume}
variable        peratom_szz atom c_atomStress[3]/${atom_volume}
variable        peratom_sxy atom c_atomStress[4]/${atom_volume}
variable        peratom_sxz atom c_atomStress[5]/${atom_volume}
variable        peratom_syz atom c_atomStress[6]/${atom_volume}
#----------- all的体积 --------------
variable        p_natom equal count(all)
variable        entityVol equal ${atom_volume}*${p_natom}
#----------- all的应力 --------------
compute         sxx0 all  reduce sum c_atomStress[1]
compute         syy0 all  reduce sum c_atomStress[2]
compute         szz0 all  reduce sum c_atomStress[3]
compute         sxy0 all  reduce sum c_atomStress[4]
compute         sxz0 all  reduce sum c_atomStress[5]
compute         syz0 all  reduce sum c_atomStress[6]
variable        sxx equal c_sxx0/${entityVol}
variable        syy equal c_syy0/${entityVol}
variable        szz equal c_szz0/${entityVol}
variable        sxy equal c_sxy0/${entityVol}
variable        sxz equal c_sxz0/${entityVol}
variable        syz equal c_syz0/${entityVol}
# --------------------------------------------------------------------


#fix             1 boundary setforce 0 0 0
variable        extraK  index   0
if "${extraK} == 0" then  "jump SELF  extraK_continue"
include         ./extraSetting.lmp_mod
label           extraK_continue
###=========================================== relaxation ==========================================
reset_timestep  0
timestep        ${timestep}
variable        restartStep index   5000

variable        etol        index   0.0
variable        ftol        index   1.0e-50
variable        miniStep    index   10
variable        maxiter     equal   ${miniStep}
variable        maxeval     equal   ${miniStep}*2

thermo          ${miniStep}

variable        nLoop  index  5000
variable        iMini  loop  ${nLoop}
label           loop_mini
    variable        tmp     equal step
    variable        step0   equal ${tmp}
    #----------------------------------------
    compute         disp  all displace/atom
    variable        disp2 atom c_disp[4]*c_disp[4]
    compute         dist2 all  reduce  sum  v_disp2
    variable        dist  equal sqrt(c_dist2)
    #
    thermo_style    custom step v_dist pe ke temp press v_sxx v_syy v_szz v_sxy v_sxz v_syz
    thermo_modify   format float %25.18g
    #
    min_style       sd
    minimize        ${etol} ${ftol} ${maxiter} ${maxeval}
    uncompute       disp
    uncompute       dist2
    #----------------------------------------
    variable        tmp     equal step
    variable        step1   equal ${tmp}
    #
    variable        vstep   equal   floor(${step1}/${restartStep})*${restartStep}
    if   "${vstep} == ${step1}" then "write_restart   min_sd.*.restart"
    variable        dstep   equal   ${step1}-${step0}
    if   "${dstep} < ${miniStep}" then "jump  SELF  loop_continue"
next            iMini
jump            SELF    loop_mini
label           loop_continue
# --------------------------------------

variable        tmp     equal step
variable        step1   equal ${tmp}
variable        vstep   equal   floor(${step1}/${restartStep})*${restartStep}
if   "${vstep} != ${step1}" then "write_restart   min_sd.*.restart"

thermo_style    custom step etotal pe ke temp press v_sxx v_syy v_szz v_sxy v_sxz v_syz
thermo_modify   format float %25.18g

dump            1 all custom 1 min_sd.lammpstrj id x y z v_peratom_sxx v_peratom_syy v_peratom_szz v_peratom_sxy v_peratom_sxz v_peratom_syz
dump_modify     1 sort id
run             0
undump          1

